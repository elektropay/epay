var MongoDB 	= require('mongodb').Db;var Server 		= require('mongodb').Server;var dbHost = 'localhost';var dbPort = 27017;var dbName = 'pay';var db = new MongoDB(dbName, new Server(dbHost, dbPort, {auto_reconnect: true}), {w: 1});db.open(function(e, d) {});var account = db.collection('account');var history = db.collection('history');var activity = db.collection('activity');var credit = db.collection('credit');var tempAct = db.collection('temp');var crypto = require('crypto'),    aes = require('crypto-js/aes'),    moment = require('moment');var Recaptcha = require('express-recaptcha').Recaptcha;var recaptcha = new Recaptcha('','');function getObjectId(id) {    return new require('mongodb').ObjectID(id);}function getChallenge(key) {    var secret = Math.random().toString().slice(2),        challenge = aes.encrypt(secret, key).toString();    return {        secret: secret,        challenge: challenge    };}function genKey(pw){        var salt = (Math.random().toString().slice(2) + '00000000000000000000000000000000').slice(0, 32),            key = crypto.createHash('sha1').update(pw + salt).digest('base64');        return {key: key, salt: salt};}function checkKey(pw, salt, key){        tkey = crypto.createHash('sha1').update(pw + salt).digest('base64');    return tkey===key;}module.exports = function(app) {    app.get('/', recaptcha.middleware.render, function(req, res) {        res.render('',{});    });    app.post('/', function (req, res) {//LOGIN CHECK        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            if(req.body['name']){                //console.log(req.body['name']);                account.findOne({name:req.body['name']},function (e,o) {                    ////console.log(e);                    //console.log('o: ' + o);                    if(o){                        //console.log(o.key);                        temp = getChallenge(o.key);                        o.secret = temp.secret;                        account.save(o,{safe:true},function () {                        });                        res.send({challenge: temp.challenge, salt: o.salt, result: 'suc'});                    }                    else {                        res.send({err:"invalid username"});                    }                })            }        } else {            res.redirect('/home');        }    });    app.get('/logout', function (req, res) {        req.session.user=undefined;        res.redirect('/')    });    app.post('/login', recaptcha.middleware.verify, function (req, res) {//LOGIN CHECK        //console.log(req.body);        if (req.session.user === undefined || req.session.user === null) {            if(!req.recaptcha.error) {                // if user is not logged-in redirect back to login page //                var name = req.body['name']                //console.log('login:' + name);                if (name) {                    //console.log(name);                    account.findOne({name: name}, function (e, o) {                        if (o) {                            if (o.secret === req.body['secret']) {                                ////console.log('abc');                                req.session.user = o;                                //console.log(req.session.user)                                //console.log('suc')                                res.status(200).send({test: 'test'});                            } else {                                res.status(400).send();                            }                        } else                            res.redirect('/');                    })                }            }            else{                res.status(400).send('recaptcha error');            }        } else {            //console.log('redirect');            res.redirect('/home');        }    });    app.get('/signup', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.render('signup', {            });        } else {            res.redirect('/home');        }    });    app.post('/signup', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            if(req.body['name'] && req.body['pass']){                account.findOne({name:req.body['name']},function (e,o) {                    if(o){                        res.status(400).send();                    }                    else {                        key = genKey(req.body['pass']);                        var newdata={                            name:req.body['name'],                            key: key.key,                            salt: key.salt,                            fn: req.body['fn'],                            ln: req.body['ln'],                            email:req.body['email'],                            address:req.body['address'],                            phone:req.body['phone'],                            balance: 0                        };                        account.insert(newdata,{safe:true},function () {                        });                        //res.redirect('/login');                        res.status(200).send({res: 'suc'});                    }                })            }        } else {            res.redirect('/home');        }    });    app.get('/login', function (req, res) {        ////console.log('123');        if (req.session.user === undefined || req.session.user === null) {            res.render('login', {                //name:req.session.user.name            });        }        else            res.redirect('/home');    });    app.get('/paid', function (req, res) {        ////console.log('123');        res.render('paid', {            //name:req.session.user.name        });    });    app.get('/history', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            history.find({user:req.session.user.name}).sort({date:-1}).toArray(function(e,o) {                var hlist = [];                if (o) {                    hlist = o;                }                res.render('history', {                    history:hlist                });            });        }    });    app.get('/activity', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            activity.find({$or: [{from: req.session.user.name}, {to: req.session.user.name}]}).sort({date:-1}).toArray(function (e, a) {                var alist = [];                if (a) {                    var index;                    for (index = 0; index < a.length; index += 1) {                        if (a[index].from === req.session.user.name) {                            a[index].type = 'Received Request';                            a[index].name = a[index].to;                        } else {                            a[index].type = 'Sent Request';                            a[index].name = a[index].from;                        }                    }                    alist = a;                }                res.render('activity', {                    activity: alist                });            });        }    });    app.get('/pay', function (req,res) {        var user=req.query.user;        var id=req.query.id;        var amount=req.query.amount;        var pid=req.query.pid;        newdata={            to:user,            amount:amount,            status:'Pending',            date:Date(),            itemid:id        };        if (req.session.user === undefined || req.session.user === null) {            tempAct.save(newdata, {safe: true}, function (e, o) {                res.redirect('/login?pid=' + o["ops"][0]["_id"]);            });        }        else {            tempAct.findOne({_id: getObjectId(pid)}, function (e, p) {                if (p) {                    p._id=undefined;                    p.from=req.session.user.name;                    activity.save(p, {safe: true}, function (e, o) {                        res.redirect('/payment?id=' + o["ops"][0]["_id"]);                    });                } else {                    newdata.from=req.session.user.name;                    activity.save(newdata, {safe: true}, function (e, o) {                        res.redirect('/payment?id=' + o["ops"][0]["_id"]);                    });                }            });        }    });    app.get('/query', function (req,res) {        var id=req.query.id;        var user=req.query.user;        if(id && user){            activity.find({$and:[{itemid: id},{to:user}]}).toArray(function (e, p) {                tempAct.find({$and:[{itemid: id},{to:user}]}).toArray(function (e, o) {                    res.send(p.concat(o));                });            });        }        else            res.send();    });    app.get('/payment', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            var id=req.query.id;            activity.findOne({_id:getObjectId(id)},function (e,o) {                if(o){                    if(o.from===req.session.user.name && o.status==='Pending'){                        res.render('payment',{                            name:o.to,                            amount:o.amount                        });                    }                    else {                        res.redirect('/home');                    }                }                else {                    res.redirect('/home');                }            });        }    });    app.post('/payment', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            var id=req.body['id'];            if(checkKey(req.body['pass'],req.session.user.salt,req.session.user.key)) {                activity.findOne({_id: getObjectId(id)}, function (e, o) {                    if (o) {                        var amount = parseFloat(o.amount);                        var name = o.to;                        if (o.from === req.session.user.name && o.status === 'Pending') {                            account.findOne({name: req.session.user.name}, function (e, o) {                                req.session.user = o;                            });                            if (req.session.user.balance < amount) {                                res.status(400).send('no enough money');                            } else {                                req.session.user.balance -= amount;                                account.update({name: req.session.user.name}, {$set: {balance: req.session.user.balance}});                                var newdata = {                                    user: req.session.user.name,                                    type: 'Outcome',                                    amount: '- $' + amount,                                    id: name,                                    date: Date()                                };                                history.save(newdata, {safe: true}, function () {                                });                                //console.log('PAY')                                account.findOne({name: name}, function (e, p) {                                    p.balance = p.balance+amount;                                    account.update({name: name}, {$set: {balance: p.balance}});                                });                                newdata = {                                    user: name,                                    type: 'Income',                                    amount: '+ $' + amount,                                    id: req.session.user.name,                                    date: Date()                                };                                history.save(newdata, {safe: true}, function () {                                });                                activity.update({_id: getObjectId(id)}, {$set: {status: 'Finished'}});                                res.status(200).send({status: 'suc'});                            }                        } else                            res.status(400).send('not you');                    } else                        res.status(400).send('no item');                });            }            else                res.status(400).send('wrong password');        }    });    app.get('/charge', function (req, res) {        ////console.log('123');        res.render('charge', {            //name:req.session.user.name        });    });    app.get('/changeprofile', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            res.redirect('/');        } else {            res.render('changeprofile', {                fn: req.session.user.fn,                ln: req.session.user.ln,                email: req.session.user.email,                address: req.session.user.address,                phone: req.session.user.phone            });        }    });    app.post('/changeprofile', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            res.redirect('/');        } else {            req.session.user.fn = req.body['fn'];            req.session.user.ln = req.body['ln'];            req.session.user.email = req.body['email'];            req.session.user.address = req.body['address'];            req.session.user.phone = req.body['phone'];            account.save(req.session.user,{safe:true},function () {            });            res.redirect('/home');        }    });    app.get('/home', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            res.redirect('/');        } else {            account.findOne({name:req.session.user.name}, function (e,o) {                req.session.user=o;            });            history.find({user:req.session.user.name}).sort({date:-1}).toArray(function(e,o) {                var hlist=[];                if(o){                    hlist=o.slice(0,5);                }                activity.find({$or:[{from:req.session.user.name},{to:req.session.user.name}]}).sort({date:-1}).toArray(function(e,a) {                    var alist=[];                    if(a){                        var index;                        for(index=0;index<a.length;index+=1){                            if(a[index].from===req.session.user.name){                                a[index].type='Received Request';                                a[index].name=a[index].to;                            }                            else{                                a[index].type='Sent Request';                                a[index].name=a[index].from;                            }                        }                        alist=a.slice(0,5);                    }                    res.render('home', {                        name: req.session.user.name,                        fullname: req.session.user.fn + ' ' + req.session.user.ln,                        email: req.session.user.email,                        address: req.session.user.address,                        phone: req.session.user.phone,                        balance: req.session.user.balance,                        history: hlist,                        activity: alist                    });                });            });        }    });    app.get('/send', function (req, res) {        /*if (req.session.user === undefined || req.session.user === null) {             // if user is not logged-in redirect back to login page //             res.redirect('/');         } else */{            account.findOne({name:req.session.user.name}, function (e,o) {                req.session.user=o;            });            res.render('send', {                balance:req.session.user.balance            });        }    });    app.post('/send', function (req, res) {        //console.log('SEND')        if (req.session.user === undefined || req.session.user === null) {            res.redirect('/');        } else {            if(checkKey(req.body['pass'],req.session.user.salt,req.session.user.key)) {                var amount = parseFloat(req.body['amount']);                if(amount>0) {                    account.findOne({name: req.session.user.name}, function (e, o) {                        req.session.user = o;                    });                    account.findOne({name: req.body['name']}, function (e, o) {                        if (o) {                            //console.log('yes');                            if (req.session.user.balance < amount)                                res.status(400).send('no enough money');                            else {                                if (req.session.user.name !== req.body['name']) {                                    req.session.user.balance -= amount;                                    account.update({name: req.session.user.name}, {$set: {balance: req.session.user.balance}});                                    o.balance += amount;                                    account.save(o, {safe: true}, function () {                                    });                                }                                var newdata = {                                    user: req.session.user.name,                                    type: 'Outcome',                                    amount: '- $' + amount,                                    id: req.body['name'],                                    date: Date()                                };                                history.save(newdata, {safe: true}, function () {                                });                                newdata = {                                    user: req.body['name'],                                    type: 'Income',                                    amount: '+ $' + amount,                                    id: req.session.user.name,                                    date: Date()                                };                                history.save(newdata, {safe: true}, function () {                                });                                res.status(200).send({status: 'suc'});                            }                        } else {                            //console.log('NO USER')                            res.status(400).send('no user');                        }                    });                }                else                    res.status(400).send('please input valid amount');            }            else{                //console.log('NO USER')                res.status(400).send('wrong password');            }        }    });    app.get('/request', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            res.redirect('/');        } else {            res.render('request',{});        }    });    app.post('/request', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            res.redirect('/');        } else {            var amount = parseFloat(req.body['amount']);            if(amount>0){                account.findOne({name:req.body['user']},function (e,o) {                    if(o){                        //console.log('yes');                        activity.save({from:req.body['user'],to:req.session.user.name, amount:amount, status:'Pending', date: Date()}, {safe:true}, function (){});                        res.status(200).send({status:'suc'});                    }                    else{                        res.status(400).send();                    }                });            }            else                res.status(400).send();        }    });    app.get('/changepassword', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            res.render('changepassword', {                //name:req.session.user.name            });        }    });    app.post('/changepassword', function (req, res) {//LOGIN CHECK        if (req.session.user === undefined || req.session.user === null) {            res.redirect('/');        } else {            if(req.body['newpass'] && req.body['newpass']!=='') {                if (checkKey(req.body['pass'], req.session.user.salt, req.session.user.key)) {                    var key = genKey(req.body['newpass']);                    account.update({name: req.session.user.name}, {$set: [{salt: key.salt}, {key: key.key}]});                    res.status(200).send({status: 'suc'});                } else {                    res.status(400).send('wrong password');                }            }            else                res.status(400).send('please input valid password');        }    });    app.get('/purchase', function (req, res) {        /*if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else */{            res.render('purchase', {                //name:req.session.user.name            });        }    });    app.get('/.well-known/acme-challenge/__hp_DcEV7O72Ctbi5sNbM8QNbuXe14WgnR5JZI1HOI', function (req, res) {        //console.log('a');        res.render('tempverify', {            //name:req.session.user.name        });    });    app.get('/creditcard', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            credit.find({user: req.session.user.name}).toArray(function(e,o) {                var clist=[];                if(o) clist=o;                res.render('creditcard', {data:clist});            });        }    });    app.post('/addcard', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            if (req.body['num'].length === 16 && req.body['name'].length > 0 && moment(req.body['date'], "YYYY-MM-DD", true).isValid() && req.body['verify'].length > 3){                var newdata = {                    user: req.session.user.name,                    num: req.body['num'],                    name: req.body['name'],                    date: req.body['date'],                    vn: req.body['verify']                };                credit.save(newdata, {safe: true}, function (e, o) {                    if (e) {                        res.status(400).send('error');                    } else {                        res.status(200).send({status: 'suc'});                    }                })            }            else                res.status(400).send('invalid input!');        }    });    app.get('/addvalue', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            credit.find({user: req.session.user.name}).toArray(function (e, o) {                var list=[];                if(o) list=o;                res.render('addvalue', {                    cards:list                });            });        }    });    app.post('/addvalue', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            if(req.body['card']!==null && req.body['card']!=='' && req.body['amount']!=='')            credit.find({$and:[{user: req.session.user.name},{num:req.body['card']}]}).toArray(function (e, o) {                if(o) {                    account.findOne({name:req.session.user.name}, function (e,o) {                        req.session.user=o;                    });                    var amount = parseFloat(req.body['amount']);                    req.session.user.balance+=amount;                    newdata = {                        user: req.session.user.name,                        type: 'Income',                        amount: '+ $' + amount,                        id: 'Credit Card '+req.body['card'],                        date: Date()                    };                    history.save(newdata, {safe: true}, function () {                    });                    account.update({name:req.session.user.name},{$set:{balance:req.session.user.balance}});                }            });            res.redirect('/home');        }    });    app.post('/deletecard', function (req, res) {        if (req.session.user === undefined || req.session.user === null) {            // if user is not logged-in redirect back to login page //            res.redirect('/');        } else {            credit.remove({$and:[{user:req.session.user.name},{num:req.body['num']}]});            res.status(200).send({status:'suc'});        }    });};